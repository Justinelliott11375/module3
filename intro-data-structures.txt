Exercises

1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

Python:
rideLine = ["Vivian","Ava","Josh","Patrick","Mike"]

Javascript:
var rideLine = ["Vivian", "Ava","Josh","Patrick","Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

Python:

rideLine.append("Mary")

Javascript:

rideLine.push("Mary");

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

Python:

def findJosh(lineList) :
  for i in lineList:
    if i == "Josh":
      print(lineList.index(i))

Javascript:

function findJosh(lineArray){
  for(let i = 0; i < lineArray.length; i++){
    if( lineArray[i] === "Josh"){
      return i;
    }
  }
}
d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

Python:


rideLine = ["Vivian","Ava","Josh","Patrick","Mike"]
def findEmily(lineList) :
  for i in lineList:
    if i == "Emily":
      return lineList.index(i)
  return "Emily is not in line."

Javascript:
var rideLine = ["Vivian", "Ava","Josh","Patrick","Mike"];
function findEmily(lineArray){
  for(let i = 0; i < lineArray.length; i++){
    if( lineArray[i] === "Emily"){
      return i;
    }
  }
  return "Emily is not in line."
}

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

Python:

rideLine.insert(1, "Melissa")

Javascript:

rideLine.splice(1,0,"Melissa")

f) If Patrick wants to leave the line, how would you delete him from the array?

Python:

rideLine.remove("Patrick")

Javascript:

rideLine.splice(3,1)

Provide another real-world example that you can model using a data structure.

Stack: A stack of graded test papers, sorted into a stack by a teacher according to the seating chart. The last paper placed on the stack will be the first one handed back to a student, continuing in reverse order.

How would your data structure allow developers to access and manipulate the data?

Stacking the papers in reverse according to the seating chart would allow for the papers to be handed back in order most efficiently(with one single path through the classroom). If a student is absent the paper can found according to the seating chart and removed. If a student has other work to be handed back it can be added to the stack again using the seating chart.
