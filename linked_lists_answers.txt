Exercises

Give written answers for each question and put them in linked-lists-answers.txt:

1. What are some pros and cons of using linked lists instead of arrays?

pros: Elements in a linked list do not have to be stored next to each other in memory, so the system may store list nodes in any available location. Because of this method of using memory, linked lists are "cheaper" on memory and can be much larger in size.
cons: Because linked lists do not use indices like arrays, accessing an element requires starting at the head of the list and moving through it sequentially to reach the desired node. This process can be inefficient.

2. Come up with a real world example of a linked list.

A scavenger hunt. The first clue would be the head, with a reference to the next clue. Clues(nodes) can be stored anywhere available, and each clue(node) has a reference to the next one, continuing sequential until the end is reached.



Programming Questions
You may program the following questions in any language of your choice (JavaScript, pseudocode, etc.).

Before beginning to code, write out a plan explaining how to solve the question.

1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.

LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET current node to head
 ELSE
   SET current.next to node
 }
}

2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

Javascript:

function removeDuplicates(linkedList){
  for(let i = linkedList.head; i !== null ; i = i.next){
    for(let j = i.next, previousNode = null; j !== null; previousNode = j, j = j.next){
      if(i.value === j.value && previousNode === null){
        console.log("duplicate in first pair:", i.value, "and", j.value)
        i.next = j.next;
        j = j.next;
      }
      else if(i.value === j.value && j.next === null){
        console.log("duplicate at end:", i.value, "and", j.value)
        previousNode.next = null;
      }
      else if(i.value === j.value){
        console.log("duplicate in middle:", i.value, "and", j.value)
        previousNode.next= j.next;
        j = j.next;
      }
    }
  }
}

3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

Python:
def reverseLinkedList(firstNode):
  currentNode = firstNode
  previousNode = None
  nextNode = None
  while currentNode:
    # print(currentNode.nodeValue)
    nextNode = currentNode.nextNode
    currentNode.nextNode = previousNode
    previousNode = currentNode
    currentNode = nextNode
