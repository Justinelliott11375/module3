Exercises

For exercises requiring code, you are free to use the language of your choice.

1. What is a binary tree and what makes it unique to other trees?

A binary tree is  a data structure that only allows each node to point to up to 2 other nodes, a left child and a right child. While all tress must have a root and flow directionally without a cycle, binary trees limit the maximum number of child nodes to 2.

2. What is a heuristic?

A heuristic is a technique of problem solving using estimation and guesswork to achieve a satisfactory solution where finding a perfect or optimal solution would be impossible or impractical.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?

A poker player may not have all of the necessary information to make the best decision in any given hand, but with the available information(their own cards, the probability of their cards actually winning, the other cards that are face up, the amount of money each player has and is betting, and the tendencies of other players in a given situation) they can estimate what move might be good enough to win or at least lose as little as possible.


4. What is the difference between a depth-first search and a breadth-first search?

A depth-first search will begin on one branch and check as far down a branch as it can, then back track and check all the way down the next branch, etc. A breadth-first search will search nodes by checking all the nodes down one level from the root, the all the nodes down two levels, and so on.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

An undirected, unweighted, a-cyclic graph would be more ambiguous than a tree; it wouldn't have a root node or hierarchy system that gave it genuine direction or starting and ending points. But being a-cyclic would also mean that the node connections also do not form a loop back to the beginning either. Being unweighted, the nodes on the graph would not have weight to determine the expense of traveling from one to another.

6. What kind of graph is a binary search tree?

A binary search tree is a tree graph, specifically a rooted binary tree in which a left child node has a value less than or equal to its parent and a right child node has a value greater than or equal to its parent.

Programming Questions

For the following questions, describe in words how you could solve the problem and then do so. Use the depiction of the Binary Search Tree to refer to the examples.


Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

// answer

function findValue(node, value){
  if (node.data === value){
    return true;
  }
  else if(node.data > value && node.leftChild !== null){
    return this.findValue(node.leftChild, value)
  }
  else if (node.data < value && node.rightChild !== null){
    return this.findValue(node.rightChild, value)
  }
  else {
    return false;
  }
}

// function to create nodes/add children

function Node(data){
  this.data = data;
  this.parent = null;
  this.leftChild = null;
  this.rightChild = null
  this.addChild = function(childData){
    if( this.data > childData){
      this.leftChild = new Node(childData);
      this.leftChild.parent = this;
    }
    else if(this.data < childData){
      this.rightChild = new Node(childData);
      this.rightChild.parent = this;
    }
  }
}

// function to create tree with root node

function Tree(data){
  var node = new Node(data);
  this.root = node;
}

// initialize tree and add children

var newTree = new Tree(8);
newTree.root.addChild(3)
newTree.root.addChild(10)
newTree.root.leftChild.addChild(1)
newTree.root.leftChild.addChild(6)
newTree.root.rightChild.addChild(14)
newTree.root.rightChild.rightChild.addChild(13)
newTree.root.leftChild.rightChild.addChild(4)
newTree.root.leftChild.rightChild.addChild(7)

//function to test answer with given range of numbers
function tests(T){
  for(let i = 0; i < T; i++){
    console.log(findValue(newTree.root, i));
  }
}

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

// function to create a node and add children
function Node(data){
  this.data = data;
  this.parent = null;
  this.leftChild = null;
  this.rightChild = null
  this.addChild = function(childData){
    if( this.data > childData){
      this.leftChild = new Node(childData);
      this.leftChild.parent = this;
    }
    else if(this.data < childData){
      this.rightChild = new Node(childData);
      this.rightChild.parent = this;
    }
  }
}

// function to create Tree with root node
function Tree(data){
  var node = new Node(data);
  this.root = node;
}


// create given tree and add children
var newTree = new Tree(8);
newTree.root.addChild(3)
newTree.root.addChild(10)
newTree.root.leftChild.addChild(1)
newTree.root.leftChild.addChild(6)
newTree.root.rightChild.addChild(14)
newTree.root.rightChild.rightChild.addChild(13)
newTree.root.leftChild.rightChild.addChild(4)
newTree.root.leftChild.rightChild.addChild(7)

// function to find given value within tree
function findValue(node, value){
  if (node.data === value){
    return node;
  }
  else if(node.data > value && node.leftChild !== null){
    return this.findValue(node.leftChild, value)
  }
  else if (node.data < value && node.rightChild !== null){
    return this.findValue(node.rightChild, value)
  }
  else {
    return false;
  }
}

// ANSWER(function to find distance between 2 given nodes)
function findDistance(tree,n1,n2){
  if (n1 === n2){
    return 0
  }
// find object and location for each node
  var n1Location = findValue(tree.root, n1);
  var n2Location = findValue(tree.root, n2);
// empty arrays to hold parental lineage of each node
  var n1ParentList = [];
  var n2ParentList = [];
// create array of all parent nodes of each given node
  function buildParentList(node, secondNode, array){
    if(node.parent !== null){
      array.push(node.parent)
      // if one node is a direct ancestor of the other, return the distance between them(array index plus one)
      if(node.parent === secondNode){
        return array.indexOf(node.parent)+1;
      }
    return buildParentList(node.parent, secondNode, array);
    }
  }
  if(buildParentList(n1Location, n2Location, n1ParentList) !== undefined){
    return(buildParentList(n1Location, n2Location, n1ParentList));
  }
  if(buildParentList(n2Location,n1Location, n2ParentList)){
    return(buildParentList(n2Location,n1Location, n2ParentList))
  }
// if neither node is a direct ancestor of the other, find closest common ancestor and return the sum of the distance from each(array index in each array plus one)
  for(let i = 0; i < n1ParentList.length; i++){
    for(let j = 0; j < n2ParentList.length; j++){
      if(n2ParentList[j] === n1ParentList[i]){
        return (n1ParentList.indexOf(n1ParentList[i]) + 1) + (n2ParentList.indexOf(n2ParentList[j]) +1);

      }
    }
  }
}

// test generator
function tests(number){
  for(let i = number; i > 0; i--){
    var treeNumbers = [1,3,4,6,7,8,10,13,14]
    var randomNodes1 = treeNumbers[Math.floor(Math.random()*treeNumbers.length)];
    var randomNodes2 = treeNumbers[Math.floor(Math.random()*treeNumbers.length)];
    console.log(randomNodes1, randomNodes2, findDistance(newTree, randomNodes1, randomNodes2));
  }
}
tests(200);
