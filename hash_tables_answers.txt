Exercises

1. What is a hash table?

A hash table is a data structure that stores data in key-value pairs in specific locations in an array. The keys are then converted into hash codes using a process called hashing.

2. What is hashing?

Hashing, typically using a hashing function or hashing algorithm, is the process of converting hash tables keys into hash codes. Hash table keys can be of different data types, use different lengths, and different alphabets. Converting these keys into hash codes makes them a specific, predetermined length, and only uses a predetermined alphabet(ex:base 10 for only numbers, base 16 for hexadecimal(0-9 and a-f)). These finite data constraints allow the computer to handle this information more quickly and predictably.

3. How does a hash table store data?

After converting the key to a hash code, the hashing function will mod its' output to figure out the actual index of an element with the function's capacity.

4. How are hash tables and objects different?

Hash tables hold collections of similar data associated with a unique key, objects bundle data  in property-value pairs

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:

a. A list of pets and their unique names.

hash table

b. The name, age, and the birthday of your best friend.

object

c. The name and location of every company in a given city.

hash table

d. All of the books checked out from a library by a particular individual.

hash table

e. The primary and secondary phone numbers for a contact.

object

6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

class Customer {
  constructor(name, address, phoneNumber) {
    this.name = name;
    this.address = address;
    this.phoneNumber = phoneNumber
  }
}

function getHashCode(person){
  return parseInt(person.phoneNumber);
}

function addCustomer(array, person){
    hashCode = getHashCode(person)
    let hashKey = hashCode % (array.length);
    array.splice(hashKey, 1, person);
}

function lookUpCustomer(phoneNumber){
  var customerIndex = parseInt(phoneNumber) % customerHashMap.length;
  return customerHashMap[customerIndex];
}

var customerHashMap = new Array(10);

var Justin = new Customer("Justin", "123 Address St", "7778889999")
var Jim = new Customer("Jim", "174 Address Ln", "1112223333")
var Sam = new Customer("Sam", "210 Address Ave", "2223334444")
var Monty = new Customer("Monty", "560 Address Dr", "5556667777")

addCustomer(customerHashMap, Justin);
addCustomer(customerHashMap, Jim);
addCustomer(customerHashMap, Sam);
addCustomer(customerHashMap, Monty);

function tests(number){
  for(let i = number; i > 0; i--){
    var phoneNumbers = ["7778889999","1112223333","2223334444","5556667777"]
    var randomPhoneNumber = phoneNumbers[Math.floor(Math.random()*phoneNumbers.length)];
    console.log(randomPhoneNumber, (lookUpCustomer(randomPhoneNumber)).name);
  }
}
tests(30);

7. Build a system that allows a store owner to track their store's inventory using a hash table for storage.

class Item {
  constructor(name, department, skuNumber) {
    this.name = name;
    this.department = department;
    this.skuNumber = skuNumber;
  }
}

function getHashCode(item){
  return parseInt(item.skuNumber);
}

function addItem(array, item){
    hashCode = getHashCode(item)
    let hashKey = hashCode % (array.length);
    // console.log(hashKey);
    array.splice(hashKey, 1, item);
}

function lookUpItem(skuNumber){
  var itemIndex = parseInt(skuNumber) % inventoryHashMap.length;
  return inventoryHashMap[itemIndex];
}

var inventoryHashMap = new Array(20);

var hammer = new Item("hammer", "tools", "2236472536");
var screwDriver = new Item("screwDriver", "tools", "7712365453");
var sprayPaint = new Item("sprayPaint", "paint", "0090876789");
var lawnMower = new Item("lawnMower", "lawn equipment", "1186687657");

addItem(inventoryHashMap, hammer);
addItem(inventoryHashMap, screwDriver);
addItem(inventoryHashMap, sprayPaint);
addItem(inventoryHashMap, lawnMower);

function tests(number){
  for(let i = number; i > 0; i--){
    var inventorySkuNumbers = ["2236472536","7712365453","0090876789","1186687657"]
    var randomInventoryNumber = inventorySkuNumbers[Math.floor(Math.random()*inventorySkuNumbers.length)];
    console.log(randomInventoryNumber, (lookUpItem(randomInventoryNumber)).name);
  }
}

tests(30);

8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

class Newspaper {
  constructor(publisher, publicationDate, articleTitle) {
    this.publisher = publisher;
    this.publicationDate = publicationDate;
    this.articleTitle = articleTitle
  }
}

function getHashCode(publisher, publicationDate){
  var str = publisher.concat(publicationDate);
  var len = str.length;
  var hash = 0;
  for(i=0; i<len; i++){
    char = str.charCodeAt((i));
    hash += char;
    }
  // make number larger to reduce likelihood of collision
  hash = Math.floor(Math.pow(hash, 2));

  // if number is less than 10 digits, multiply to make it fixed length of 10
  var hashLength = Math.floor(Math.log(hash) / Math.LN10 + 1);
  if (hashLength < 10){
    hash = hash * (10 ** (10 - hashLength));
  }
  return hash;
}

var hashMap = new Map();

var moonLanding = new Newspaper("John Doe", "6/20/1969", "Man Lands on Moon");

var jupiterFlyby = new Newspaper("Steve Smith", "12/3/1973", "Pioneer 10 Flies by Jupiter");

var marsLanding = new Newspaper("Sam Hill", "7/20/1976", "Viking 1 Lands on Mars");

function addToMap(map, article){
  hashCode = getHashCode(article.publisher, article.publicationDate);
  map.set(hashCode, article);
}

function lookUpArticle(publisher, publicationDate){
  var hashCode = getHashCode(publisher, publicationDate);
  return hashMap.get(hashCode);
}

addToMap(hashMap, moonLanding);
addToMap(hashMap, jupiterFlyby);
addToMap(hashMap, marsLanding);

lookUpArticle('John Doe', '6/20/1969');
